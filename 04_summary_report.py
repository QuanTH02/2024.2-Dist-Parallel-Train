# 04_summary_report.py
"""
T·ªïng h·ª£p k·∫øt qu·∫£ t·ª´ c√°c th√≠ nghi·ªám v√† sinh b√°o c√°o
"""
import json
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import os

def load_metrics():
    metrics_data = {}
    json_files = [f for f in os.listdir('.') if f.endswith('_metrics.json')]
    for file in json_files:
        try:
            with open(file, 'r') as f:
                data = json.load(f)
                method_name = file.replace('_metrics.json', '').replace('_', ' ').title()
                metrics_data[method_name] = data
                print(f"Loaded: {method_name}")
        except Exception as e:
            print(f"Error loading {file}: {e}")
    return metrics_data

if __name__ == "__main__":
    print("=== Summary Report ===")
    all_metrics = load_metrics()
    if not all_metrics:
        print("Creating sample data...")
        all_metrics = {
            'Single GPU': {'summary': {'final_loss': 4.2, 'total_time': 120.5, 'steps_per_second': 0.83}},
            'Multi GPU': {'summary': {'final_loss': 4.1, 'total_time': 85.2, 'steps_per_second': 1.17}},
            'DeepSpeed ZeRO-3': {'summary': {'final_loss': 4.0, 'total_time': 75.8, 'steps_per_second': 1.32}},
            'PyTorch FSDP': {'summary': {'final_loss': 3.9, 'total_time': 70.3, 'steps_per_second': 1.42}}
        }
    print(f"Loaded {len(all_metrics)} methods")
    data = []
    for method, metrics in all_metrics.items():
        summary = metrics['summary']
        data.append({
            'Method': method,
            'Final Loss': summary['final_loss'],
            'Total Time (s)': summary['total_time'],
            'Steps/Second': summary['steps_per_second']
        })
    df = pd.DataFrame(data)
    print("\nPerformance Summary:")
    print(df.round(3))
    df.to_csv('performance_summary.csv', index=False)
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('Performance Analysis', fontsize=16, fontweight='bold')
    axes[0, 0].bar(df['Method'], df['Final Loss'], color='skyblue', alpha=0.8)
    axes[0, 0].set_title('Final Loss')
    axes[0, 0].set_ylabel('Loss')
    axes[0, 0].tick_params(axis='x', rotation=45)
    axes[0, 1].bar(df['Method'], df['Steps/Second'], color='lightgreen', alpha=0.8)
    axes[0, 1].set_title('Training Speed')
    axes[0, 1].set_ylabel('Steps/Second')
    axes[0, 1].tick_params(axis='x', rotation=45)
    axes[1, 0].bar(df['Method'], df['Total Time (s)'], color='salmon', alpha=0.8)
    axes[1, 0].set_title('Total Training Time')
    axes[1, 0].set_ylabel('Time (s)')
    axes[1, 0].tick_params(axis='x', rotation=45)
    axes[1, 1].scatter(df['Steps/Second'], df['Final Loss'], s=100, alpha=0.7)
    for i, method in enumerate(df['Method']):
        axes[1, 1].annotate(method, (df['Steps/Second'].iloc[i], df['Final Loss'].iloc[i]),
                            xytext=(5, 5), textcoords='offset points', fontsize=8)
    axes[1, 1].set_xlabel('Steps/Second')
    axes[1, 1].set_ylabel('Final Loss')
    axes[1, 1].set_title('Speed vs Loss')
    axes[1, 1].grid(True, alpha=0.3)
    plt.tight_layout()
    plt.savefig('performance_analysis.png', dpi=300, bbox_inches='tight')
    plt.show()
    print("\n=== CONCLUSIONS ===")
    best_speed = df.loc[df['Steps/Second'].idxmax()]
    best_loss = df.loc[df['Final Loss'].idxmin()]
    print(f"üèÜ BEST PERFORMERS:\n  ‚Ä¢ Fastest: {best_speed['Method']} ({best_speed['Steps/Second']:.2f} steps/sec)\n  ‚Ä¢ Best Loss: {best_loss['Method']} (Loss: {best_loss['Final Loss']:.3f})")
    print(f"\nüí° RECOMMENDATIONS:\n  ‚Ä¢ Research: Use PyTorch FSDP\n  ‚Ä¢ Production: Use DeepSpeed ZeRO\n  ‚Ä¢ Large Models: Combine ZeRO + Pipeline")
    report = f"""\n# Fine-tuning Language Models Report\n\n## Results\n{df.to_markdown(index=False)}\n\n## Conclusions\n- Fastest: {best_speed['Method']}\n- Best Loss: {best_loss['Method']}\n\n## Recommendations\n- Research: PyTorch FSDP\n- Production: DeepSpeed ZeRO\n- Large Models: ZeRO + Pipeline\n"""
    with open('final_report.md', 'w', encoding='utf-8') as f:
        f.write(report)
    print("\n‚úÖ Report saved to 'final_report.md'") 