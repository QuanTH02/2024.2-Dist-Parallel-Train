#!/usr/bin/env python3
"""
Script ƒë·ªÉ ch·∫°y t·∫•t c·∫£ c√°c th√≠ nghi·ªám fine-tuning language models
"""

import os
import sys
import subprocess
import time
import json
from datetime import datetime

def check_environment():
    """Ki·ªÉm tra m√¥i tr∆∞·ªùng tr∆∞·ªõc khi ch·∫°y"""
    print("üîç Ki·ªÉm tra m√¥i tr∆∞·ªùng...")
    
    # Ki·ªÉm tra CUDA
    try:
        import torch
        if not torch.cuda.is_available():
            print("‚ùå CUDA kh√¥ng kh·∫£ d·ª•ng!")
            return False
        
        gpu_count = torch.cuda.device_count()
        print(f"‚úÖ CUDA kh·∫£ d·ª•ng v·ªõi {gpu_count} GPU(s)")
        
        if gpu_count < 2:
            print("‚ö†Ô∏è  C·∫£nh b√°o: C·∫ßn √≠t nh·∫•t 2 GPU ƒë·ªÉ ch·∫°y ƒë·∫ßy ƒë·ªß c√°c th√≠ nghi·ªám")
        
        return True
    except ImportError:
        print("‚ùå PyTorch ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!")
        return False

def install_dependencies():
    """C√†i ƒë·∫∑t dependencies"""
    print("üì¶ C√†i ƒë·∫∑t dependencies...")
    
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], 
                      check=True, capture_output=True, text=True)
        print("‚úÖ Dependencies ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói c√†i ƒë·∫∑t dependencies: {e}")
        return False

def run_notebook(notebook_path, timeout=1800):
    """Ch·∫°y notebook v√† tr·∫£ v·ªÅ k·∫øt qu·∫£"""
    print(f"üöÄ Ch·∫°y {notebook_path}...")
    
    try:
        # Ch·∫°y notebook b·∫±ng jupyter nbconvert
        result = subprocess.run([
            sys.executable, "-m", "jupyter", "nbconvert", 
            "--to", "notebook", 
            "--execute", 
            "--output", f"executed_{notebook_path}",
            notebook_path
        ], timeout=timeout, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úÖ {notebook_path} ho√†n th√†nh")
            return True
        else:
            print(f"‚ùå {notebook_path} th·∫•t b·∫°i: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print(f"‚è∞ {notebook_path} timeout sau {timeout}s")
        return False
    except Exception as e:
        print(f"‚ùå L·ªói ch·∫°y {notebook_path}: {e}")
        return False

def run_experiments():
    """Ch·∫°y t·∫•t c·∫£ c√°c th√≠ nghi·ªám"""
    print("üß™ B·∫Øt ƒë·∫ßu ch·∫°y c√°c th√≠ nghi·ªám...")
    
    notebooks = [
        "01_single_vs_multi_gpu.ipynb",
        "02_deepspeed_vs_fsdp.ipynb", 
        "03_pipeline_parallelism.ipynb",
        "04_summary_report.ipynb"
    ]
    
    results = {}
    start_time = time.time()
    
    for notebook in notebooks:
        if os.path.exists(notebook):
            print(f"\n{'='*50}")
            print(f"Ch·∫°y {notebook}")
            print(f"{'='*50}")
            
            success = run_notebook(notebook)
            results[notebook] = success
            
            if not success:
                print(f"‚ö†Ô∏è  B·ªè qua c√°c notebook ti·∫øp theo do l·ªói")
                break
        else:
            print(f"‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y {notebook}")
            results[notebook] = False
    
    total_time = time.time() - start_time
    
    return results, total_time

def generate_summary_report(results, total_time):
    """T·∫°o b√°o c√°o t·ªïng h·ª£p"""
    print("\nüìä T·∫°o b√°o c√°o t·ªïng h·ª£p...")
    
    summary = {
        "timestamp": datetime.now().isoformat(),
        "total_time_minutes": total_time / 60,
        "results": results,
        "success_count": sum(results.values()),
        "total_count": len(results)
    }
    
    # L∆∞u summary
    with open("experiment_summary.json", "w") as f:
        json.dump(summary, f, indent=2)
    
    # T·∫°o b√°o c√°o text
    report = f"""
# B√°o c√°o Ch·∫°y Th√≠ nghi·ªám Fine-tuning Language Models

## Th√¥ng tin T·ªïng quan
- **Th·ªùi gian b·∫Øt ƒë·∫ßu**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- **T·ªïng th·ªùi gian ch·∫°y**: {total_time/60:.1f} ph√∫t
- **S·ªë th√≠ nghi·ªám th√†nh c√¥ng**: {summary['success_count']}/{summary['total_count']}

## K·∫øt qu·∫£ Chi ti·∫øt

"""
    
    for notebook, success in results.items():
        status = "‚úÖ Th√†nh c√¥ng" if success else "‚ùå Th·∫•t b·∫°i"
        report += f"- **{notebook}**: {status}\n"
    
    report += f"""
## Files ƒë∆∞·ª£c t·∫°o
- `experiment_summary.json`: D·ªØ li·ªáu t·ªïng h·ª£p
- `performance_summary.csv`: D·ªØ li·ªáu performance
- `final_report.md`: B√°o c√°o chi ti·∫øt
- `*.png`: Bi·ªÉu ƒë·ªì v√† charts
- `*_metrics.json`: Metrics t·ª´ng ph∆∞∆°ng ph√°p

## H∆∞·ªõng d·∫´n ti·∫øp theo
1. Xem `final_report.md` ƒë·ªÉ c√≥ b√°o c√°o chi ti·∫øt
2. Ki·ªÉm tra c√°c file `*_metrics.json` ƒë·ªÉ ph√¢n t√≠ch t·ª´ng ph∆∞∆°ng ph√°p
3. Xem c√°c bi·ªÉu ƒë·ªì `*.png` ƒë·ªÉ so s√°nh tr·ª±c quan

---
*B√°o c√°o ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông v√†o {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
"""
    
    with open("experiment_report.md", "w", encoding="utf-8") as f:
        f.write(report)
    
    print("‚úÖ B√°o c√°o ƒë√£ ƒë∆∞·ª£c t·∫°o:")
    print("  - experiment_summary.json")
    print("  - experiment_report.md")

def main():
    """Main function"""
    print("üéØ Fine-tuning Language Models - Automated Experiments")
    print("=" * 60)
    
    # Ki·ªÉm tra m√¥i tr∆∞·ªùng
    if not check_environment():
        print("‚ùå M√¥i tr∆∞·ªùng kh√¥ng ph√π h·ª£p. D·ª´ng ch·∫°y.")
        return
    
    # C√†i ƒë·∫∑t dependencies
    if not install_dependencies():
        print("‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t dependencies. D·ª´ng ch·∫°y.")
        return
    
    # Ch·∫°y th√≠ nghi·ªám
    results, total_time = run_experiments()
    
    # T·∫°o b√°o c√°o
    generate_summary_report(results, total_time)
    
    # In k·∫øt qu·∫£ cu·ªëi
    print("\n" + "=" * 60)
    print("üéâ HO√ÄN TH√ÄNH!")
    print("=" * 60)
    
    success_count = sum(results.values())
    total_count = len(results)
    
    print(f"üìà K·∫øt qu·∫£: {success_count}/{total_count} th√≠ nghi·ªám th√†nh c√¥ng")
    print(f"‚è±Ô∏è  T·ªïng th·ªùi gian: {total_time/60:.1f} ph√∫t")
    
    if success_count == total_count:
        print("üéä T·∫•t c·∫£ th√≠ nghi·ªám ƒë√£ ho√†n th√†nh th√†nh c√¥ng!")
    else:
        print("‚ö†Ô∏è  M·ªôt s·ªë th√≠ nghi·ªám th·∫•t b·∫°i. Ki·ªÉm tra logs ƒë·ªÉ debug.")
    
    print("\nüìÅ Files quan tr·ªçng:")
    print("  - experiment_report.md: B√°o c√°o t·ªïng h·ª£p")
    print("  - final_report.md: B√°o c√°o chi ti·∫øt")
    print("  - performance_summary.csv: D·ªØ li·ªáu performance")

if __name__ == "__main__":
    main() 